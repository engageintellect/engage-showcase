---
import { type CollectionEntry, getCollection } from "astro:content";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import Header from "../../components/Header.astro";
import BaseHead from "../../components/BaseHead.astro";
import { formatTag } from "../../utils";
import SearchFilter from "../../components/SearchFilter.svelte";
import { fade } from "astro:transitions";

interface Post {
  slug: string;
  data: {
    title: string;
    description: string;
    category: string;
    pubDate: string;
    tags: string[];
  };
}

type TagRoute = {
  params: {
    tag: string;
  };
};

export async function getStaticPaths(): Promise<TagRoute[]> {
  const posts = await getCollection("project");
  const tagSet = new Set<string>();

  // Extract and process tags
  posts.forEach((post) => {
    if (Array.isArray(post.data.tags)) {
      post.data.tags.forEach((tag) => {
        const lowercaseTag = tag.toLowerCase();
        const urlTag = formatTag(lowercaseTag);
        tagSet.add(urlTag);
      });
    }
  });

  // Convert tagSet to an array of tag objects
  const tagRoutes: TagRoute[] = Array.from(tagSet).map((tag) => ({
    params: { tag },
  }));

  return tagRoutes;
}

const tagParam: string = Astro.params.tag || ""; // Assuming tagParam is a string
const allPosts: CollectionEntry<"project">[] = await getCollection("project");

const pageObjects: Post[] = [];

for (const post of allPosts) {
  const tags = post.data.tags;

  // Check if tags is an array and process each tag
  if (Array.isArray(tags)) {
    const processedTags = tags.map((tag) => formatTag(tag));

    // Check if any of the processed tags match tagParam
    if (processedTags.includes(formatTag(tagParam))) {
      const postTitle = String(post.data.title);
      const postSlug = formatTag(postTitle);
      const postCategory = String(post.data.category);
      const postDescription = String(post.data.description);
      const postPubDate = String(post.data.pubDate);

      // Create a newPost object conforming to the Post type
      const newPost: Post = {
        slug: postSlug,
        data: {
          title: postTitle,
          description: postDescription,
          category: postCategory,
          pubDate: postPubDate,
          tags: tags,
        },
      };

      pageObjects.push(newPost);
    }
  }
}

// After populating the pageObjects array, sort it in reverse chronological order
pageObjects.sort((a, b) => {
  // Assuming pubDate is in a format that can be directly compared, e.g., 'YYYY-MM-DD'
  // For other formats, you might need to parse them into Date objects first
  return (
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
});

let search: string = "";
let filteredPosts: Post[] = pageObjects; // This now starts off in reverse chronological order

function handleSearch(event: Event) {
  const inputElement = event.target as HTMLInputElement;
  search = inputElement.value.toLowerCase();

  // Filter posts based on the search term, already in reverse chronological order
  filteredPosts = pageObjects.filter((post) =>
    post.data.title.toLowerCase().includes(search)
  );
}

// console.log("my post", pageObjects);
---

<html
  lang="en"
  transition:name="root"
  transition:animate="none"
  data-theme="lofi"
>
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <div>
    <Header />

    <div
      class="flex justify-center text-xl md:text-2xl gap-2 mt-5 max-w-3xl mx-auto"
    >
      <div class="lowercase">Tag:</div>
      <div class="font-bold">#{tagParam}</div>
    </div>

    <div transition:animate={fade({ duration: ".25s" })}>
      <SearchFilter
        client:load
        handleSearch={handleSearch}
        searchInput={search}
        allItems={filteredPosts}
        filterCategory=""
      />
    </div>
  </div>
</html>
