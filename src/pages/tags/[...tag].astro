---
import { type CollectionEntry, getCollection } from "astro:content";
import ProjectPost from "../../layouts/ProjectPost.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import Header from "../../components/Header.astro";
import TaggedFilter from "../../components/TaggedFilter.svelte";
import BaseHead from "../../components/BaseHead.astro";

type Props = CollectionEntry<"project">;
const tagParam = Astro.params.tag;
const allPosts = await getCollection("project");
let pageObjects: { title: string; slug: string; tags: string[] }[] = [];

import { type CollectionEntry, getCollection } from "astro:content";

type TagRoute = {
  params: {
    tag: string;
  };
};

export async function getStaticPaths(): Promise<TagRoute[]> {
  const posts = await getCollection<CollectionEntry<"project">>("project");

  const tagSet = new Set<string>();

  // Extract and process tags
  posts.forEach((post) => {
    if (Array.isArray(post.data.tags)) {
      post.data.tags.forEach((tag) => {
        const lowercaseTag = tag.toLowerCase();
        const urlTag = lowercaseTag.replace(/\s+/g, "-");
        tagSet.add(urlTag);
      });
    }
  });

  // Convert tagSet to an array of tag objects
  const tagRoutes: TagRoute[] = Array.from(tagSet).map((tag) => ({
    params: { tag },
  }));

  return tagRoutes;
}

console.log("Tagged Pages:");

interface Post {
  title: string;
  slug: string;
  category: string;
  pubDate: string;
  tags: string[];
}

for (let i = 0; i < allPosts.length; i++) {
  const tags = allPosts[i].data.tags;

  // Check if tags is an array and process each tag
  if (Array.isArray(tags)) {
    const processedTags = tags.map((tag) =>
      tag.toLowerCase().replace(/\s+/g, "-")
    );

    // Check if any of the processed tags match tagParam
    if (processedTags.includes(tagParam.toLowerCase().replace(/\s+/g, "-"))) {
      let postTitle = String(allPosts[i].data.title);
      let postSlug = postTitle
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/\./g, "");

      const newPost: Post = {
        title: postTitle,
        slug: postSlug,
        category: allPosts[i].data.category,
        pubDate: allPosts[i].data.pubDate,
        tags: tags,
      };

      pageObjects.push(newPost);
    }
  }
}

let search = "";
let filteredPosts = pageObjects;

function handleSearch(event: any) {
  search = event.target.value.toLowerCase();

  // Filter posts based on the search term
  filteredPosts = pageObjects.filter((post) =>
    post.title.toLowerCase().includes(search)
  );
}
// console.log("my post", pageObjects);
---

<head>
  <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
</head>
<div>
  <Header />

  <div class="flex justify-center text-xl md:text-2xl gap-2 mt-5">
    <div>Tag:</div>
    <div class="font-bold">#{tagParam}</div>
  </div>

  <div>
    <TaggedFilter
      client:load
      handleSearch={handleSearch}
      searchInput={search}
      allItems={filteredPosts}
    />
  </div>
</div>
